---
import { getCollection } from 'astro:content';
import { Button } from "./ui/button";

// Get all unique tags across all directory items
const allDirectoryItems = await getCollection('directory');
const tagsMap = new Map();

allDirectoryItems.forEach(item => {
  item.data.tags.forEach(tag => {
    tagsMap.set(tag, (tagsMap.get(tag) || 0) + 1);
  });
});

// Sort tags by count (descending)
const sortedTags = [...tagsMap.entries()].sort((a, b) => b[1] - a[1]);
---

<div id="filters-form" class="bg-white border border-gray-200 rounded-lg p-6 sticky top-6 animate-fade-up shadow-sm hover:shadow-md transition-shadow duration-300">
  <h2 class="font-bold text-lg mb-4 flex items-center gap-2">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-[#5CEBA1]" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
    </svg>
    Filters
  </h2>
  
  <div class="mb-6">
    <h3 class="font-medium text-gray-900 mb-3">Categories</h3>
    <div class="space-y-2">
      {sortedTags.slice(0, 10).map(([tag, count]) => (
        <div class="flex items-center justify-between">
          <a href={`/category/${tag}`} class="text-gray-600 hover:text-[#5CEBA1] flex items-center group transition-all duration-300 hover:translate-x-1">
            <span class="w-1 h-1 rounded-full bg-[#5CEBA1]/0 group-hover:bg-[#5CEBA1]/50 mr-2 transition-all duration-300"></span>
            <span class="text-sm">{tag}</span>
          </a>
          <span class="text-xs text-gray-400 bg-gray-50 px-2 py-0.5 rounded-full group-hover:bg-[#5CEBA1]/5 group-hover:text-[#5CEBA1] transition-colors duration-300">{count}</span>
        </div>
      ))}
      {sortedTags.length > 10 && (
        <a href="/categories" class="text-[#5CEBA1] text-sm hover:underline mt-2 inline-block">
          View all categories
        </a>
      )}
    </div>
  </div>
  
  <div class="mb-6">
    <h3 class="font-medium text-gray-900 mb-3">Status</h3>
    <div class="space-y-2">
      <label class="flex items-center group cursor-pointer">
        <input type="checkbox" name="status" value="featured" class="rounded text-[#5CEBA1] focus:ring-[#5CEBA1] transition-all duration-300 cursor-pointer" />
        <span class="ml-2 text-sm text-gray-600 group-hover:text-[#5CEBA1] transition-colors duration-300">Featured</span>
      </label>
      <label class="flex items-center group cursor-pointer">
        <input type="checkbox" name="status" value="official" class="rounded text-[#5CEBA1] focus:ring-[#5CEBA1] transition-all duration-300 cursor-pointer" />
        <span class="ml-2 text-sm text-gray-600 group-hover:text-[#5CEBA1] transition-colors duration-300">Official</span>
      </label>
      <label class="flex items-center group cursor-pointer">
        <input type="checkbox" name="status" value="new" class="rounded text-[#5CEBA1] focus:ring-[#5CEBA1] transition-all duration-300 cursor-pointer" />
        <span class="ml-2 text-sm text-gray-600 group-hover:text-[#5CEBA1] transition-colors duration-300">New</span>
      </label>
    </div>
  </div>
  
  <div>
    <h3 class="font-medium text-gray-900 mb-3">Rating</h3>
    <div class="space-y-2">
      <label class="flex items-center group cursor-pointer">
        <input type="radio" name="rating" value="5" class="text-[#5CEBA1] focus:ring-[#5CEBA1] transition-all duration-300 cursor-pointer" />
        <span class="ml-2 text-sm text-gray-600 group-hover:text-[#5CEBA1] flex items-center transition-colors duration-300">
          <span class="flex">
            {Array(5).fill(0).map(() => (
              <svg class="h-4 w-4 text-yellow-400 transition-transform duration-300 group-hover:scale-110" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
              </svg>
            ))}
          </span>
          <span class="ml-1">& Up</span>
        </span>
      </label>
      <label class="flex items-center group cursor-pointer">
        <input type="radio" name="rating" value="4" class="text-[#5CEBA1] focus:ring-[#5CEBA1] transition-all duration-300 cursor-pointer" />
        <span class="ml-2 text-sm text-gray-600 group-hover:text-[#5CEBA1] flex items-center transition-colors duration-300">
          <span class="flex">
            {Array(4).fill(0).map(() => (
              <svg class="h-4 w-4 text-yellow-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
              </svg>
            ))}
            <svg class="h-4 w-4 text-gray-300" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
            </svg>
          </span>
          <span class="ml-1">& Up</span>
        </span>
      </label>
      <label class="flex items-center group cursor-pointer">
        <input type="radio" name="rating" value="3" class="text-[#5CEBA1] focus:ring-[#5CEBA1] transition-all duration-300 cursor-pointer" />
        <span class="ml-2 text-sm text-gray-600 group-hover:text-[#5CEBA1] flex items-center transition-colors duration-300">
          <span class="flex">
            {Array(3).fill(0).map(() => (
              <svg class="h-4 w-4 text-yellow-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
              </svg>
            ))}
            {Array(2).fill(0).map(() => (
              <svg class="h-4 w-4 text-gray-300 transition-transform duration-300 group-hover:scale-110" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
              </svg>
            ))}
          </span>
          <span class="ml-1 opacity-75">&amp; Up</span>
        </span>
      </label>
    </div>

<script>
  const form = document.getElementById('filters-form') as HTMLFormElement;
  if (!form) throw new Error('Filters form not found');

  const statusCheckboxes = Array.from(
    form.querySelectorAll('input[name="status"]')
  ) as HTMLInputElement[];

  const ratingRadios = Array.from(
    form.querySelectorAll('input[name="rating"]')
  ) as HTMLInputElement[];

  // Handle radio button changes
  ratingRadios.forEach(radio => {
    radio.addEventListener('change', () => {
      const searchParams = new URLSearchParams(window.location.search);
      searchParams.set('rating', radio.value);
      window.location.href = `${window.location.pathname}?${searchParams.toString()}`;
    });
  });

  // Handle checkbox changes
  statusCheckboxes.forEach(checkbox => {
    checkbox.addEventListener('change', () => {
      const searchParams = new URLSearchParams(window.location.search);
      const selectedStatuses = statusCheckboxes
        .filter(cb => cb.checked)
        .map(cb => cb.value);
      
      if (selectedStatuses.length > 0) {
        searchParams.set('status', selectedStatuses.join(','));
      } else {
        searchParams.delete('status');
      }
      
      window.location.href = `${window.location.pathname}?${searchParams.toString()}`;
    });
  });

  function updateFilters() {
    const searchParams = new URLSearchParams(window.location.search);
    const selectedStatuses = statusCheckboxes
      .filter(checkbox => checkbox.checked)
      .map(checkbox => checkbox.value);
    
    const selectedRating = ratingRadios
      .find(radio => radio.checked)?.value;

    if (selectedStatuses.length > 0) {
      searchParams.set('status', selectedStatuses.join(','));
    } else {
      searchParams.delete('status');
    }

    if (selectedRating) {
      searchParams.set('rating', selectedRating);
    } else {
      searchParams.delete('rating');
    }

    window.location.search = searchParams.toString();
  }


  // Set initial values from URL params
  const urlParams = new URLSearchParams(window.location.search);
  const statusParam = urlParams.get('status');
  const ratingParam = urlParams.get('rating');

  if (statusParam) {
    const statuses = statusParam.split(',');
    statusCheckboxes.forEach(checkbox => {
      checkbox.checked = statuses.includes(checkbox.value);
    });
  }

  if (ratingParam) {
    const ratingInput = form.querySelector(
      `input[name="rating"][value="${ratingParam}"]`
    ) as HTMLInputElement | null;
    
    if (ratingInput) {
      ratingInput.checked = true;
    }
  }
</script>
  </div>
  
  <Button type="button" className="w-full mt-8 transition-all duration-300 hover:shadow-lg active:scale-95">
    Apply Filters
  </Button>
</div>

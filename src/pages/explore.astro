---
import MainLayout from '../layouts/MainLayout.astro';
import SearchBar from '../components/SearchBar.astro';
import DirectoryCard from '../components/DirectoryCard.astro';
import FiltersSidebar from '../components/FiltersSidebar';
import { getCollection, render } from 'astro:content';

const allDirectoryItems = await getCollection('directory');

// Get all unique tags across all directory items
const tagsMap = new Map();
allDirectoryItems.forEach(item => {
  item.data.tags.forEach(tag => {
    tagsMap.set(tag, (tagsMap.get(tag) || 0) + 1);
  });
});

// Get filter parameters from URL
const ratingFilter = Astro.url.searchParams.get('rating');
const statusFilter = Astro.url.searchParams.get('status')?.split(',') || [];

// Apply filters
let filteredItems = allDirectoryItems;

// Apply status filters
if (statusFilter.length > 0) {
  filteredItems = filteredItems.filter(item => {
    return statusFilter.some(status => {
      switch (status) {
        case 'featured':
          return item.data.featured;
        case 'official':
          return item.data.official;
        case 'new':
          return item.data.new;
        default:
          return false;
      }
    });
  });
}

// Apply rating filter
if (ratingFilter) {
  const selectedRating = parseInt(ratingFilter);
  filteredItems = filteredItems.filter(item => {
    const rating = item.data.rating || 0;
    return rating >= selectedRating;
  });
}

// Convert items to a format safe for client-side JavaScript
const serializedItems = allDirectoryItems.map(item => ({
  ...item.data,
  id: item.id
}));

// Prepare items for rendering
const renderedItems = await Promise.all(
  filteredItems.map(async (item) => {
    const rendered = await render(item);
    return {
      ...item.data,
      id: item.id,
      rendered
    };
  })
);
---

<MainLayout title="Explore Directory Listings">
  <div class="mb-8">
    <h1 class="text-3xl font-bold mb-2">
      Explore <span class="text-[#5CEBA1]">Directory</span> Listings
    </h1>
    <p class="text-gray-600">
      Browse through our extensive collection of directory listings
    </p>
  </div>

  <SearchBar />

  <div class="flex flex-col md:flex-row gap-8 mt-8">
    <div class="md:w-1/4">
      <FiltersSidebar
        client:load
        tags={[...tagsMap.entries()].sort((a, b) => b[1] - a[1])}
        initialRating={ratingFilter}
        initialStatus={statusFilter}
      />
    </div>
    
    <div class="md:w-3/4">
      <div class="bg-white border border-gray-200 rounded-lg p-6 mb-6">
        <div class="flex items-center justify-between mb-4">
          <div class="text-gray-500 text-sm">
            Showing <span class="font-medium">{filteredItems.length}</span> results
          </div>
          <div class="flex items-center space-x-2">
            <span class="text-sm text-gray-500">Sort by:</span>
            <select class="text-sm border border-gray-200 rounded-md px-2 py-1 focus:outline-none focus:ring-2 focus:ring-[#5CEBA1]">
              <option>Most Relevant</option>
              <option>Newest First</option>
              <option>Highest Rated</option>
              <option>Name (A-Z)</option>
            </select>
          </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {filteredItems.map(item => {
            const id = item.id.replace(/\.md$/, '');
            return (
              <DirectoryCard
                title={item.data.title}
                description={item.data.description}
                logo={item.data.logo}
                author={item.data.author}
                tags={item.data.tags}
                id={id}
                featured={item.data.featured}
                official={item.data.official}
                new={item.data.new}
                advertisement={item.data.advertisement}
                rating={item.data.rating}
              />
            );
          })}
        </div>
        
        <div class="mt-8 flex justify-center">
          <nav class="flex items-center">
            <a href="#" class="h-10 w-10 flex items-center justify-center rounded-md text-gray-500 hover:bg-gray-100">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
              </svg>
            </a>
            <a href="#" class="h-10 w-10 flex items-center justify-center rounded-md bg-[#5CEBA1] text-white">1</a>
            <a href="#" class="h-10 w-10 flex items-center justify-center rounded-md text-gray-500 hover:bg-gray-100">2</a>
            <a href="#" class="h-10 w-10 flex items-center justify-center rounded-md text-gray-500 hover:bg-gray-100">3</a>
            <span class="h-10 flex items-center justify-center px-2 text-gray-500">...</span>
            <a href="#" class="h-10 w-10 flex items-center justify-center rounded-md text-gray-500 hover:bg-gray-100">10</a>
            <a href="#" class="h-10 w-10 flex items-center justify-center rounded-md text-gray-500 hover:bg-gray-100">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
              </svg>
            </a>
          </nav>
        </div>
      </div>
    </div>
  </div>
</MainLayout>
